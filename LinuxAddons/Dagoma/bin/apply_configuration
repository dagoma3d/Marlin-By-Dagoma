#!/usr/bin/env bash

DEBUG=false
DRYRUN=false
BASE_NAME=$(basename $0)
TOOL_DIR=$(realpath $(dirname $0))
MARLIN_DIR=$(realpath ${TOOL_DIR}/../../..)
#PROFILE_DIR=$(realpath ${MARLIN_DIR}/Marlin/example_configurations/Dagoma)
PROFILE_DIR=$(realpath ${TOOL_DIR}/../conf/serie)
DEFAULT_PROFILE_DIR=$(realpath ${TOOL_DIR}/../conf/Default)
LIST_ACTION=false
MAKE_BACKUP=false
RESTORE_DEFAULT=false
VERBOSE=true
HUMAN_OUTPUT=true
BUILD_MATRIX=false
JSON_CONF=false
CHECKSUM=
PATH_CONF=false
GIT_CHECKOUT_FIRST=false
BUILD_CODE=false
PROFILE_TO_APPLY=
VARIANT_TO_LIST=
declare -A VARIANTS_TO_APPLY
declare -a VARIANTS_TO_APPLY_orders
SED_REPLACE_INPLACE="sed -i"

if [ "$(uname)" == "Darwin" ]; then
	command -v brew >/dev/null 2>&1 || { 
	/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	}
	command -v gsed >/dev/null 2>&1 || { 
		brew install gnu-sed
	}
	if ((BASH_VERSINFO[0] < 4))
	then
		brew install bash
		echo "Please re-run the script, installation done"
		exit 1
	fi
	SED_REPLACE_INPLACE="gsed -i"
fi

usage() {
	echo "usage: ${BASE_NAME} [options] profile_name [variant_name] [checksum] [variant:value]*"
	echo
	echo "OPTIONS:"
	echo "    -b, --backend        use backend output style"
	echo "                         do not output human readable information"
	echo
	echo "    -bc, --build-code    output build code against given cli configuration"
	echo
	echo "    -bm, --build-matrix  output build matrix"
	echo "                         assume --backend"
	echo
	echo "    -d, --debug          enable debug"
	echo "                         should be the first option"
	echo
	echo "    -h, --help           display this help and exit"
	echo
	echo "    -gcof, --git-checkout-first           make a git checkout first of modified file"
	echo
	echo "    -j, --json-conf      output json conf"
	echo "                         generate a json conf output of input parameters"
	echo "                         You can provide a checksum value after the profile name"
	echo
	echo "    -l, --list           list available profiles / variants / variant values"
	echo "                         if a profile name is specified, list available variants"
	echo "                         if a profile and a variant name are specified, list available variant values"
	echo 
	echo "    -p, --path-conf      output path conf"
	echo "                         generate a path output corresponding to actual conf of input parameters"
	echo
	echo "    -q, --quiet          do job silently"
	echo
	echo "    -r, --dryrun         enable dryrun"
	echo "                         do not apply porfile. Print to stdout actions instead"
	echo
	echo "    -z, --raz            restore default configuration"
	echo "                         equivalent to '${BASE_NAME} Default'"
	echo
	exit 1
}

debug() {
	$DEBUG && echo "debug: ${1}"
}

error() {
	echo "error: ${1}"
}

dryrun() {
	$DRYRUN && echo "dryrun: ${*}" || ${*}
}

while test -n "$1"
do
	case "$1" in
		-h|--help)
			usage
			;;
		-d|--debug)
			DEBUG=true
			debug "Debug enabled."
			;;
		-l|--list)
			LIST_ACTION=true
			debug "Profile listing."
			;;
		-b|--backend)
			HUMAN_OUTPUT=false
			debug "Backend output enabled."
			;;
		-bm|--build-matrix)
			HUMAN_OUTPUT=false
			BUILD_MATRIX=true
			debug "Build matrix output enabled."
			;;
		-bc|--build-code)
			BUILD_CODE=true
			debug "Build code output enabled."
			;;
		-j|--json-conf)
			JSON_CONF=true
			debug "JSON conf output enabled."
			;;
		-p|--path-conf)
			PATH_CONF=true
			debug "PATH conf output enabled."
			;;
		-b|--backup)
			MAKE_BACKUP=true
			debug "Backup before applying configuration enabled."
			;;
		-gcof|--git-checkout-first)
			GIT_CHECKOUT_FIRST=true
			debug "Git checkout first enabled."
			;;
		-r|--dryrun)
			DRYRUN=true
			debug "Enabling dryrun"
			;;
		-z|--raz)
			RESTORE_DEFAULT=true
			debug "Restore default configuration"
			;;
		-q|--quiet)
			VERBOSE=false
			debug "Quiet enable"
			;;
		*)
			debug "Cli parsing: option other : $1."
			if echo "${1}" | grep --quiet ':'
			then
				debug "Cli parsing: Variant:Value pair detected: $1"
				variant_name=$(echo $1 | cut -f1 -d\:)
				variant_value=$(echo $1 | cut -f2 -d\:)
				VARIANTS_TO_APPLY[$variant_name]=$variant_value
				VARIANTS_TO_APPLY_orders+=( "$variant_name" )
			elif test -n "${PROFILE_TO_APPLY}"
			then
				if $LIST_ACTION
				then
					debug "Cli parsing: List action enabled. Accepts variant name."
					if test -n "${VARIANT_TO_LIST}"
					then
						error "Unrecognized parameter: $1"
						usage
					fi
					debug "Cli parsing: Detected variant name to list: $1"
					VARIANT_TO_LIST="$1"
				else
					if $JSON_CONF
					then
						debug "Cli parsing: JSON conf action enabled. Accepts checksum."
						if test -n "${CHECKSUM}"
						then
							error "Unrecognized parameter: $1"
							usage
						fi
						debug "Cli parsing: Detected checksum: $1"
						CHECKSUM="$1"
					else
						error "Unrecognized parameter: $1"
						usage
					fi
				fi
			else
				debug "Cli parsing: Detected profile: $1"
				PROFILE_TO_APPLY="$1"
			fi
			;;
	esac
	shift
done

debug "BASE_NAME:           ${BASE_NAME}"
debug "TOOL_DIR:            ${TOOL_DIR}"
debug "MARLIN_DIR:          ${MARLIN_DIR}"
debug "PROFILE_DIR:         ${PROFILE_DIR}"
debug "DEFAULT_PROFILE_DIR: ${DEFAULT_PROFILE_DIR}"

variant_value_exists()
{
	test -f "${PROFILE_DIR}/${1}/variants/${2}/${3}"
}

variant_exists()
{
	test -d "${PROFILE_DIR}/${1}/variants/${2}"
}

list_variants_values() {
	NEXT=
	for variant_value in $(find "${PROFILE_DIR}/$1/variants/$2" -mindepth 1 -maxdepth 1 -type f | sort)
		do
			if $HUMAN_OUTPUT
			then
				echo -n "${NEXT} $(basename ${variant_value})"
				NEXT=" |"
			else
				echo "$(basename ${variant_value})"
			fi
		done
		$HUMAN_OUTPUT && echo
}

list_variants() {
	
	debug "List variants"
	
	if ! profile_exists $1
	then
		error "Profile does not exists: $1"
		exit 1
	fi

	if variants_exists $1
	then
		$HUMAN_OUTPUT && echo "Available variants for profile $1:"
		for variant in $(find "${PROFILE_DIR}/$1/variants" -mindepth 1 -maxdepth 1 -type d | sort)
		do
			variant="$(basename ${variant})"
			if $HUMAN_OUTPUT
			then
				echo "    ${variant}: $(list_variants_values $1 ${variant})"
			else
				echo "${variant}"
			fi
		done
	else
		$HUMAN_OUTPUT && echo "No variant available for profile $1."
	fi
}

profile_exists() {
	test -f "${PROFILE_DIR}/$1/Base" #test -d "${PROFILE_DIR}/$1/files"
}

variants_exists() {
	test -d "${PROFILE_DIR}/$1/variants"
}

list_profile() {

	debug "List profiles"

	$HUMAN_OUTPUT && echo "Avaialble profiles:"
	for profile in $(find ${PROFILE_DIR} -mindepth 1 -maxdepth 1 -type d | sort)
	do
		echo "    $(basename ${profile})"
	done
}

list() {

	debug "List"

	if test -z "${PROFILE_TO_APPLY}"
	then
		list_profile
	elif test -z "${VARIANT_TO_LIST}"
	then
		list_variants ${PROFILE_TO_APPLY}
	else
		list_variants_values ${PROFILE_TO_APPLY} ${VARIANT_TO_LIST}
	fi

	exit 0
}

recursive_variant_value() {
	# $1 : serie
	# $2 : LAST_VARIANT_NAME
	# $3 : current variant
	echo "CURRENT_MATRIX_SERIE: ${CURRENT_MATRIX_SERIE}"
	echo "${2}"
	for variant in $(list_variants ${1} ${2})
	do
		echo "Remaining variants: ${variant}"

	done
}

build_matrix() {

	
	for serie in $(list_profile)
	do
		unset matrix
		declare -a matrix

		index=0
		first_variant=true
		for variant in $(list_variants ${serie})
		do
			unset tmp_matrix
			declare -a tmp_matrix

			for variant_value in $(list_variants_values ${serie} ${variant})
			do
				
				if $first_variant
				then
					# first variant: we simply iterate through variant values
					tmp_matrix[$index]="${serie} ${variant}:${variant_value}"
					index=$(expr $index + 1)
				else
					for m_idx in ${!matrix[*]}
					do
						tmp_matrix[${index}]="${matrix["${m_idx}"]} ${variant}:${variant_value}"
						index=$(expr $index + 1)
					done
				fi
			done

			# swap from tmp_matrix to matrix
			for m_idx in ${!matrix[*]}
			do
				unset matrix[${m_idx}]
			done
			for m_idx in ${!tmp_matrix[*]}
			do
				matrix[${m_idx}]="${tmp_matrix[${m_idx}]}"	
			done
			
			first_variant=false
		done

		if test ${index} -eq 0
		then
			debug "No variant for serie: ${serie}"
			echo "${serie}"
		else
			# Output variants permutations
			for m_idx in ${!matrix[*]}
			do
				echo "${matrix["${m_idx}"]}"
			done
		fi

		
	done

	exit 0
}

json_conf_ouput() {
	echo "{"
	echo "    \"serie\": \"${PROFILE_TO_APPLY}\""
	for variant_name in ${!VARIANTS_TO_APPLY[*]}
	do
		variant_value=${VARIANTS_TO_APPLY[$variant_name]}
		echo "    ,\"${variant_name}\": \"${variant_value}\""
	done
	if test -n "${CHECKSUM}"
	then
		echo "    ,\"checksum\": \"${CHECKSUM}\""
	fi
	echo "}"
	exit 0
}

path_conf_ouput() {
	echo -n "${PROFILE_TO_APPLY}"
	for variant_name in ${!VARIANTS_TO_APPLY[*]}
	do
		variant_value=${VARIANTS_TO_APPLY[$variant_name]}
		echo -n "/${variant_name}/${variant_value}"
	done
	echo
	exit 0
}

sanity_checks() {

	debug "Sanity check"

	# Profile to apply not null
	if test -z "${PROFILE_TO_APPLY}"
	then
		error "Profile to apply not specified";
		usage
	fi

	# Profile exists
	if ! profile_exists ${PROFILE_TO_APPLY}
	then
		error "Profile does not exist: ${PROFILE_TO_APPLY}."
		list_profile
		exit 1
	fi

	# All variants exists
	for variant_name in ${!VARIANTS_TO_APPLY[*]}
	do
		debug "Given variant name: ${variant_name}"
		if ! variant_exists ${PROFILE_TO_APPLY} ${variant_name}
		then
			error "Variant does not exist for profile ${PROFILE_TO_APPLY}: ${variant_name}"
			list_variants ${PROFILE_TO_APPLY}
			exit 1
		fi
		variant_value=${VARIANTS_TO_APPLY[$variant_name]}
		debug "Given variant value: ${variant_value}"
		if ! variant_value_exists ${PROFILE_TO_APPLY} ${variant_name} ${variant_value}
		then
			error "Variant value does not exist for profile ${PROFILE_TO_APPLY} and variant ${variant_name}: ${variant_value}"
			list_variants ${PROFILE_TO_APPLY}
			exit 1
		fi
	done
}

codify() {
	if test -n "$(echo $1 | grep ':')"
	then
		echo -n $(codify $(echo $1 | cut -f1 -d:))
		echo -n ':'
		echo -n $(codify $(echo $1 | cut -f2 -d:))
	elif test -n "$(echo $1 | grep '-')"
	then
		echo -n $(codify $(echo $1 | cut -f1 -d\-))
		echo -n $(codify $(echo $1 | cut -f2 -d\-))
	elif test -n "$(echo $1 | grep '_')"
	then
		echo -n $(codify $(echo $1 | cut -f1 -d_))
		echo -n $(codify $(echo $1 | cut -f2 -d_))
	else
		echo $(echo $1 | cut -b-3 | tr [A-Z] [a-z])
	fi
}

build_code() {

	debug "Build code"

	echo -n $(codify ${PROFILE_TO_APPLY})

	for i in "${!VARIANTS_TO_APPLY_orders[@]}"
	do
		variant_name="${VARIANTS_TO_APPLY_orders[$i]}"
		variant_value="${VARIANTS_TO_APPLY[${variant_name}]}"
		echo -n '-'
		echo -n $(codify ${variant_name}:${variant_value})
	done

	echo
	exit 0
}

$LIST_ACTION && list

$BUILD_MATRIX && build_matrix

sanity_checks

$JSON_CONF && json_conf_ouput
$PATH_CONF && path_conf_ouput
$BUILD_CODE && build_code

Enable() {
	debug "Conf: Enable: ${*}"
	
	IN_CONF="$(grep -e "#define \+${1}\( \|$\)" ${MARLIN_DIR}/Marlin/Configuration.h)"
	IN_CONF_ADV="$(grep -e "#define \+${1}\( \|$\)" ${MARLIN_DIR}/Marlin/Configuration_adv.h)"

	if test -z "${IN_CONF}" && test -z "${IN_CONF_ADV}"
	then
		debug "      Adding non existing entry: ${1}"
		iln="$(grep -n 'macros.h' ${MARLIN_DIR}/Marlin/Configuration.h | cut -f1 -d:)"
		iln="$(expr $iln + 2)"
		debug "      Insertion line number: ${iln}"
		dryrun eval "${SED_REPLACE_INPLACE} '${iln}i\\\\#define ${1}' ${MARLIN_DIR}/Marlin/Configuration.h"
	else
		dryrun eval "${SED_REPLACE_INPLACE} 's/\/\/ *\(#define *${1}\)/\1/g' ${MARLIN_DIR}/Marlin/Configuration.h"
		dryrun eval "${SED_REPLACE_INPLACE} 's/\/\/ *\(#define *${1}\)/\1/g' ${MARLIN_DIR}/Marlin/Configuration_adv.h"
	fi
}

Disable() {
	debug "Conf: Disable: ${*}"
	dryrun eval "${SED_REPLACE_INPLACE} 's/\(\/\/ *\)*\(\#define *${1}\)\( \|\$\)/\/\/\2\3/g' ${MARLIN_DIR}/Marlin/Configuration.h"
	dryrun eval "${SED_REPLACE_INPLACE} 's/\(\/\/ *\)*\(\#define *${1}\)\( \|\$\)/\/\/\2\3/g' ${MARLIN_DIR}/Marlin/Configuration_adv.h"
}

Set() {
	debug "Conf: Set: ${*}"
	
	IN_CONF="$(grep "\ ${1}\ " ${MARLIN_DIR}/Marlin/Configuration.h)"
	IN_CONF_ADV="$(grep "\ ${1}\ " ${MARLIN_DIR}/Marlin/Configuration_adv.h)"

	if test -z "${IN_CONF}" && test -z "${IN_CONF_ADV}"
	then
		debug "      Adding non existing entry: ${1}"
		iln="$(grep -n 'macros.h' ${MARLIN_DIR}/Marlin/Configuration.h | cut -f1 -d:)"
		iln="$(expr $iln + 2)"
		debug "      Insertion line number: ${iln}"
		dryrun eval "${SED_REPLACE_INPLACE} '${iln}i\\\\#define ${1} ${2}' ${MARLIN_DIR}/Marlin/Configuration.h"
	else
		dryrun eval "${SED_REPLACE_INPLACE} 's/\(#define *${1}\) *.*\$/\1 ${2}/g' ${MARLIN_DIR}/Marlin/Configuration.h"
		dryrun eval "${SED_REPLACE_INPLACE} 's/\(${1}\)\( *= *\)[^;]\+;.*\$/\1 = ${2};/g' ${MARLIN_DIR}/Marlin/Configuration.h"
		dryrun eval "${SED_REPLACE_INPLACE} 's/\(#define *${1}\) *.*\$/\1 ${2}/g' ${MARLIN_DIR}/Marlin/Configuration_adv.h"
		dryrun eval "${SED_REPLACE_INPLACE} 's/\(${1}\)\( *= *\)[^;]\+;.*\$/\1 = ${2};/g' ${MARLIN_DIR}/Marlin/Configuration_adv.h"
	fi
}

Pin() {
	debug "Conf: Pin: ${*}"
	
	debug "      Adding non existing entry: ${1}"
	iln="$(grep -n '__PINS_H' ${MARLIN_DIR}/Marlin/pins.h | cut -f1 -d:)"
	iln="$(expr $iln)"
	debug "      Insertion line number: ${iln}"
	dryrun eval "${SED_REPLACE_INPLACE} '${iln}i\\\\#undef ${1}\\n#define ${1} ${2}' ${MARLIN_DIR}/Marlin/pins.h"
	
}

apply_configuration_file() {
	debug "Applying configuration file: ${1}"
	while read line
	do
		eval "$line"
	done < "${1}"

	if test -n "${line}"
	then
		eval "$line"
	fi
}

if ${GIT_CHECKOUT_FIRST}
then
	echo "Checking out back some known modified files ..."
	git checkout Marlin/Configuration.h
	git checkout Marlin/Configuration_adv.h
	git checkout Marlin/platformio.ini
	git checkout Marlin/pins.h
	echo "Checking out back done."
fi

if test -d "${PROFILE_DIR}/${PROFILE_TO_APPLY}/files"
then
	echo "Applying base profile static files: ${PROFILE_TO_APPLY}"

	dryrun cp ${PROFILE_DIR}/${PROFILE_TO_APPLY}/files/* ${MARLIN_DIR}/Marlin
fi

echo "Applying base configuration profile: ${PROFILE_TO_APPLY}"
apply_configuration_file "${PROFILE_DIR}/${PROFILE_TO_APPLY}/Base"

for variant_name in ${!VARIANTS_TO_APPLY[*]}
do
	variant_value=${VARIANTS_TO_APPLY[$variant_name]}

	echo "Applying variant: ${variant_name}=${variant_value}"

	# Just in case, remove \r from variant files...
	sed -i 's/\r$//' "${PROFILE_DIR}/${PROFILE_TO_APPLY}/variants/${variant_name}/${variant_value}"

	# And finally apply config viriant
	apply_configuration_file "${PROFILE_DIR}/${PROFILE_TO_APPLY}/variants/${variant_name}/${variant_value}"
done


$DRYRUN && exit 1 || exit 0